#!/bin/bash
# 4-column grid system across dual monitors
# Columns: [Screen0-Left] [Screen0-Right] [Screen1-Left] [Screen1-Right]

direction="$1"

if ! command -v wmctrl &> /dev/null || ! command -v xdotool &> /dev/null || ! command -v xrandr &> /dev/null; then
    exit 1
fi

active_window=$(xdotool getactivewindow 2>/dev/null)
if [ -z "$active_window" ]; then
    exit 1
fi

wmctrl -i -r "$active_window" -b remove,maximized_vert,maximized_horz 2>/dev/null

# Get current window position
window_info=$(wmctrl -lG | grep "$(printf '0x%08x' $active_window)")
if [ -z "$window_info" ]; then
    exit 1
fi

current_x=$(echo "$window_info" | awk '{print $3}')
current_y=$(echo "$window_info" | awk '{print $4}')
current_width=$(echo "$window_info" | awk '{print $5}')
current_height=$(echo "$window_info" | awk '{print $6}')

# Get monitor info dynamically
declare -a screen_x screen_y screen_width screen_height
screen_count=0

while read -r line; do
    if echo "$line" | grep -q " connected"; then
        geometry=$(echo "$line" | grep -o '[0-9]\+x[0-9]\++[0-9]\++[0-9]\+')
        if [ -n "$geometry" ]; then
            screen_width[$screen_count]=$(echo "$geometry" | cut -d'x' -f1)
            screen_height[$screen_count]=$(echo "$geometry" | cut -d'x' -f2 | cut -d'+' -f1)
            screen_x[$screen_count]=$(echo "$geometry" | cut -d'+' -f2)
            screen_y[$screen_count]=$(echo "$geometry" | cut -d'+' -f3)
            ((screen_count++))
        fi
    fi
done <<< "$(xrandr --query)"

if [ $screen_count -eq 0 ]; then
    exit 1
fi

panel_height=40

# Define convenience variables for first two screens
screen0_x=${screen_x[0]}
screen0_y=${screen_y[0]}
screen0_width=${screen_width[0]}
screen0_height=${screen_height[0]}

if [ $screen_count -gt 1 ]; then
    screen1_x=${screen_x[1]}
    screen1_y=${screen_y[1]}
    screen1_width=${screen_width[1]}
    screen1_height=${screen_height[1]}
fi

usable_height=$((screen0_height - panel_height))

# Determine current column (0-3)
current_column=-1

if [ $current_x -lt 1920 ]; then
    # On screen 0
    if [ $current_x -lt 960 ]; then
        current_column=0  # Screen 0 left
    else
        current_column=1  # Screen 0 right
    fi
else
    # On screen 1
    if [ $current_x -lt 2880 ]; then
        current_column=2  # Screen 1 left
    else
        current_column=3  # Screen 1 right
    fi
fi

# Determine if window is half-height
is_half_height=false
if [ $current_height -le $((usable_height / 2 + 50)) ] && [ $current_height -ge $((usable_height / 2 - 50)) ]; then
    is_half_height=true
fi

# Determine if window is full-width (check against current monitor)
is_full_width=false
current_monitor_width=0
if [ $current_x -lt $screen0_width ]; then
    # On screen 0
    current_monitor_width=$screen0_width
else
    # On screen 1 or beyond
    current_monitor_width=$screen1_width
fi

if [ $current_width -ge $((current_monitor_width - 50)) ]; then
    is_full_width=true
fi

# Calculate target column
case "$direction" in
    "left")
        target_column=$((current_column - 1))
        if [ $target_column -lt 0 ]; then
            target_column=3  # Wrap to rightmost column
        fi
        ;;
    "right")
        target_column=$((current_column + 1))
        if [ $target_column -gt 3 ]; then
            target_column=0  # Wrap to leftmost column
        fi
        ;;
    "up"|"down"|"expand-up"|"expand-down"|"expand-left"|"expand-right")
        target_column=$current_column  # Stay in same column
        ;;
esac

# Calculate new position based on target column
case $target_column in
    0) # Screen 0 left
        new_x=$screen0_x
        new_width=$((screen0_width / 2))
        target_screen_y=$screen0_y
        ;;
    1) # Screen 0 right
        new_x=$((screen0_x + screen0_width / 2))
        new_width=$((screen0_width / 2))
        target_screen_y=$screen0_y
        ;;
    2) # Screen 1 left
        new_x=$screen1_x
        new_width=$((screen1_width / 2))
        target_screen_y=$screen1_y
        ;;
    3) # Screen 1 right
        new_x=$((screen1_x + screen1_width / 2))
        new_width=$((screen1_width / 2))
        target_screen_y=$screen1_y
        ;;
esac

# Handle vertical movement
case "$direction" in
    "left"|"right")
        # Preserve vertical position when moving horizontally
        if [ "$is_half_height" = true ]; then
            # Window is half-height, preserve top/bottom position
            relative_y=$((current_y - (current_y < 1920 ? screen0_y : screen1_y)))
            if [ $relative_y -lt $((usable_height / 2)) ]; then
                new_y=$target_screen_y
                new_height=$((usable_height / 2))
            else
                new_y=$((target_screen_y + usable_height / 2))
                new_height=$((usable_height / 2))
            fi
        else
            # Full height
            new_y=$target_screen_y
            new_height=$usable_height
        fi
        ;;
    "up")
        new_y=$target_screen_y
        new_height=$((usable_height / 2))
        ;;
    "down")
        new_y=$((target_screen_y + usable_height / 2))
        new_height=$((usable_height / 2))
        ;;
    "expand-up"|"expand-down")
        # Determine current monitor for proper width calculation
        target_monitor=$((target_column / 2))
        if [ $target_monitor -eq 0 ]; then
            target_monitor_x=${screen_x[0]}
            target_monitor_width=${screen_width[0]}
        else
            target_monitor_x=${screen_x[1]}
            target_monitor_width=${screen_width[1]}
        fi
        
        # Handle vertical expansion based on current window state
        if [ "$is_half_height" = false ]; then
            # Window is quarter height - expand to half height, preserving horizontal position
            new_y=$target_screen_y
            new_height=$((usable_height / 2))
            if [ "$direction" = "expand-down" ]; then
                new_y=$((target_screen_y + usable_height / 2))
            fi
        else
            # Window is half height - check if it's also full width
            if [ "$is_full_width" = true ]; then
                # Full-width half window - expand to full window
                new_y=$target_screen_y
                new_height=$usable_height
                # Preserve full width
                new_x=$target_monitor_x
                new_width=$target_monitor_width
            else
                # Half-width half window - expand to full height, preserve horizontal position
                new_y=$target_screen_y
                new_height=$usable_height
            fi
        fi
        ;;
    "expand-left"|"expand-right")
        # Expand/contract half window horizontally with directional behavior
        # Determine current monitor for the target column
        target_monitor=$((target_column / 2))
        if [ $target_monitor -eq 0 ]; then
            target_monitor_x=${screen_x[0]}
            target_monitor_y=${screen_y[0]}
            target_monitor_width=${screen_width[0]}
            target_monitor_height=${screen_height[0]}
        else
            target_monitor_x=${screen_x[1]}
            target_monitor_y=${screen_y[1]}
            target_monitor_width=${screen_width[1]}
            target_monitor_height=${screen_height[1]}
        fi
        target_usable_height=$((target_monitor_height - panel_height))
        
        # Check if window is currently half-width
        half_width=$((target_monitor_width / 2))
        is_half_width=false
        if [ $current_width -le $((half_width + 50)) ] && [ $current_width -ge $((half_width - 50)) ]; then
            is_half_width=true
        fi
        
        # Determine current horizontal position (left/right half)
        relative_x=$((current_x - target_monitor_x))
        is_left_half=false
        if [ $relative_x -lt $half_width ]; then
            is_left_half=true
        fi
        
        if [ "$is_half_width" = true ]; then
            if [ "$direction" = "expand-right" ]; then
                if [ "$is_left_half" = true ]; then
                    # From left half: expand to full width
                    new_x=$target_monitor_x
                    new_width=$target_monitor_width
                else
                    # From right half: already right, expand to full
                    new_x=$target_monitor_x
                    new_width=$target_monitor_width
                fi
            else # expand-left
                if [ "$is_left_half" = true ]; then
                    # From left half: already left, expand to full
                    new_x=$target_monitor_x
                    new_width=$target_monitor_width
                else
                    # From right half: expand to full width
                    new_x=$target_monitor_x
                    new_width=$target_monitor_width
                fi
            fi
        else
            # Window is full-width, contract based on direction
            new_width=$half_width
            if [ "$direction" = "expand-right" ]; then
                # Contract to right half
                new_x=$((target_monitor_x + half_width))
            else # expand-left
                # Contract to left half
                new_x=$target_monitor_x
            fi
        fi
        
        # Preserve vertical position and size
        if [ "$is_half_height" = true ]; then
            new_height=$((target_usable_height / 2))
            if [ $((current_y - target_monitor_y)) -lt $((target_usable_height / 2)) ]; then
                new_y=$target_monitor_y
            else
                new_y=$((target_monitor_y + target_usable_height / 2))
            fi
        else
            new_height=$target_usable_height
            new_y=$target_monitor_y
        fi
        ;;
esac

# Apply new position
wmctrl -i -r "$active_window" -e "0,$new_x,$new_y,$new_width,$new_height"